// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// user
model User{
  id        String    @id @default(uuid()) @db.Uuid
  fullName  String    @map("full_name")
  email     String    @unique
  password  String    @map("password_hash")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

//relation
session         Session[]
category        Category[]
paymentSource  PaymentSource[]
unit           Unit[]
income         Income[]
expense        Expense[]

@@map("users")
}

///session
model Session{
  id            String    @id @default(uuid()) @db.Uuid
  sessionToken  String    @unique   @map("session_token")
  userId        String    @db.Uuid  @map("user_id")
  expires       DateTime

  //Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

//Categories (self-references)
model Category{
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid @map("user_id")
  name      String

  ///Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses  Expense[]

  @@index([userId])
  @@unique([userId, name])
  @@map("category")
}

///sub-categories
model SubCategory{
  id          Int     @id @default(autoincrement())
  userId      String  @db.Uuid @map("user_id")
  categoryId  Int?    @map("category_id")
  name        String

  //Relations
  user        User        @relation(fields: [userId], references:[id], onDelete:Cascade)
  category  Category?  @relation(fields:[categoryId], references:[id], onDelete:Cascade)

  @@index([userId])
  @@index([categoryId])
  @@unique([userId,categoryId,name])
  @@map("sub_category")

}

/// paymentSources
model PaymentSource{
  id              Int     @id @default(autoincrement())
  userId          String  @db.Uuid @map("user_id")
  name            String
  initialBalance  Decimal @default(0) @db.Decimal(15,2) @map("initial_balance")

  //relation
  user      User    @relation(fields: [userId], references: [id], onDelete:Cascade)
  income   Income[]
  expense  Expense[]

  @@index([userId])
  @@map("payment_sources")
}

///units
model Unit{
  id            Int      @id       @default(autoincrement())
  userId        String   @db.Uuid  @map("user_id")
  name          String
  abbreviation  String?  @db.VarChar(50)

  //relation
  user          User    @relation(fields:[userId], references: [id], onDelete:Cascade)
  expense      Expense[]

  @@index([userId])
  @@map("units")
}

//Incomes
model Income{
  id               Int        @id @default(autoincrement())
  userId           String     @db.Uuid  @map("user_id")
  amount           Decimal    @db.Decimal(15, 2)
  description      String?    @db.Text
  incomeDate       DateTime   @db.Date  @map("income_date")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime? @updatedAt  @map("updated_at")
  paymentSourceId  Int        @map("payment_source_id")

  //relation
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentSource PaymentSource @relation(fields:[paymentSourceId], references:[id], onDelete:Restrict)


  @@index([userId])
  @@index([paymentSourceId])
  @@map("incomes")
}

// MERCHANTS
model Merchant {
  id     Int    @id @default(autoincrement())
  userId String @db.Uuid @map("user_id")
  name   String

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[]

  @@index([userId])
  @@map("merchants")
}

///Expense
model Expense{
  id            Int       @id @default(autoincrement())
  userId        String    @db.Uuid  @map("user_id")
  productName   String    @map("product_name")
  quantity      Decimal   @db.Decimal(10, 2)
  unitPrice     Decimal   @db.Decimal(15, 2) @map("unit_price")
  finalPrice    Decimal   @db.Decimal(15, 2) @map("final_price")
  purchaseDate  DateTime  @map("purchase_date")
  description   String?   @db.Text
  isPromo       Boolean   @default(false) @map("is_promo")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  categoryId    Int?      @map("category_id")
  subCategoryId Int?      @map("sub_category_id")
  merchantId    Int?      @map("merchant_id")
  paymentSourceId Int?    @map("payment_source_id")
  unitId        Int?      @map("unit_id")
 

  //Relations
  user            User          @relation(fields: [userId], references:[id], onDelete:Cascade)
  merchant      Merchant?      @relation(fields:[merchantId], references:[id], onDelete:SetNull)
  paymentSource PaymentSource? @relation(fields:[paymentSourceId], references:[id], onDelete:SetNull)
  category      Category?     @relation(fields:[categoryId], references:[id], onDelete:SetNull)
  unit          Unit?           @relation(fields:[unitId], references:[id], onDelete:SetNull)
  subCategory   SubCategory?    @relation(fields:[subCategoryId], references:[id], onDelete:SetNull)
  promo           Promo?

  @@index([userId])
  @@index([categoryId])
  @@index([subCategoryId])
  @@index([merchantId])
  @@index([paymentSourceId])
  @@index([unitId])

  @@map("expenses")
}

//Promo
model PromoType{
  id          Int     @id @default(autoincrement())
  type        String  
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt  @map("updated_at")

  //relation
  Promos  Promo[]

  @@map("promo_types")
}

//Promo

model Promo{
  id              Int     @id @default(autoincrement())
  name            String  
  percentage      Decimal?  @db.Decimal(5,2)
  amount          Decimal?  @db.Decimal(15,2)
  buyQty          Int?
  getQty          Int?
  bundleQty       Int?
  bundlePrice     Decimal?  @db.Decimal(15,2)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  promoTypeId     Int       @map("promo_type_id")
  expenseId       Int      @unique @map("expense_id")


  //relation
  promoType     PromoType   @relation(fields:[promoTypeId], references:[id], onDelete:Restrict)
  expense       Expense     @relation(fields:[expenseId], references:[id], onDelete:Cascade)

  @@index([promoTypeId])
  @@index([expenseId])

  @@map("promos")
}