// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// user
model User{
  id        String    @id @default(uuid()) @db.Uuid
  fullName  String    @map("full_name")
  email     String    @unique
  password  String    @map("password_hash")
  createdAt DateTime  @default(now()) @map("created_at")
  updateAt  DateTime? @db.DateTime @map("updated_at")

//relation
session         Session[]
categories      Categories[]
paymentSources  PaymentSources[]
units           Units[]
incomes         Incomes[]
expenses        Expenses[]

@@map("users")
}

///session
model Session{
  id            String    @id @default(uuid()) @db.Uuid
  sessionToken  String    @unique   @map("session_token")
  userId        String    @db.Uuid  @map("user_id")
  expires       DateTime

  //Relations
  user User @relation(field: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

//Categories (self-references)
model Categories{
  id        Int      @id @default(autoincrement())
  userId    String   db.Uuid @map("user_id")
  name      String

  ///Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses  Expenses[]

  @@index)[userId]
  @@map("categories")
}

///sub-categories
model SubCategories{
  id          Int     @id @default(autoincrement())
  userId      String  @db.Uuid @map("user_id")
  categoryId  Int?    @map("categories_id")
  name        String

  //Relations
  user        User        @relation(fields: [userId], references:[id], onDelete:Cascade)
  categories  Categories  @relation(fields:[categoryId], references:[id], onDelete:Cascade)

  @@index([userId])
  @@index([categoryId])
  @@map(""sub_categories)

}

/// paymentSources
model PaymentSources{
  id              Int     @id @default(autoincrement())
  userId          String  @db.Uuid @map("user_id")
  name            String
  initialBalance  Decimal @default(0) @db.Decimal(15,2) @map("initial_balance")

  //relation
  user      User    @relation(fields: [userId], references: [id], onDelete:Cascade)
  incomes   Incomes[]
  expenses  Expenses[]

  @@index([userId])
  @@map("payment_sources")
}

///units
model Unit{
  id            @id       @default(autoincrement())
  userId        @String   @db.Uuid  @map("user_id")
  name          @String
  abbreviation  @String?  @db.VaeChar(50)

  //relation
  user          User    @relation(fields:[userId], references: [id], onDelete:Cascade)
  expenses      Expenses[]

  @@index([userId])
  @@map("units")
}

//Incomes
model Income{
  id               Int        @id @default(autoincrement())
  userId           String     @db.Uuid  @map("user_id")
  amount           Decimal    @db.Decimal(15, 2)
  description      String?    @db.Text
  incomeDate       DateTime   @db.Date  @map("income_date")
  createdAt        DateTime   @default(now()) @map("created_at")
  updateAt         DateTime?  @map("updated_at")
  paymentSourceId  Int        @map("payment_source_id")

  //relation
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentSource PaymentSource @relation(fields:[paymentSourceId], references:[id], onDelete:Cascade)


  @@index([userId])
  @@index([paymentSourceId])
  @@map("incomes")
}

///Expenses
model Expense{
  id            Int       @id @default(autoincrement())
  userId        String    @db.Uuid  @map("user_id")
  productName   String    @map("product_name")
  quantity      Decimal   @db.Decimal(10, 2)
  unitPrice     Decimal   @db.Decimal(15, 2) @map("unit_price")
  finalPrice    Decimal   @db.Decimal(15, 2) @map("final_price")
  purchaseDate  DateTime  @map("purchase_date")
  description   String?   @db.Text
  isPromo       Boolean   @default(false) @map("is_promo")
  createdAt     DateTime  @default(false) @map("created_at")
  updateAt      DateTime? @map("updated_at")
}